/*#version 120
#ifdef GL_ES
precision mediump float;
#endif

#ifndef TAU
  #define TAU 6.28318530718
#endif


#define ITERATIONS 40

varying vec2 texCoord;

uniform sampler2D tex;
uniform vec2 resolution;
uniform float time; // time in seconds

float random(vec2 co)
{
   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);
}



//Use last part of hash function to generate new random radius and angle
vec2 mult(inout vec2 r) {
  r = fract(r * vec2(12.9898,78.233));
  return sqrt(r.x + .001) * vec2(sin(r.y * TAU), cos(r.y * TAU));
}

vec3 blur(vec2 uv, float radius, float aspect, float offset) {
  vec2 circle = vec2(radius);
  circle.x *= aspect;
  vec2 rnd = vec2(random(vec2(uv + offset)));

  vec3 acc = vec3(0.0);
  for (int i = 0; i < ITERATIONS; i++) {
    acc += texture2D(tex,(uv + circle * mult(rnd))).xyz;
  }
  return acc / float(ITERATIONS);
}

vec3 blur(vec2 uv, float radius, float aspect) {
  return blur(uv, radius, aspect, 0.0);
}

vec3 blur(vec2 uv, float radius) {
  return blur(uv, radius, 1.0);
}


void kore() {
	
  float texelSize = 1.0 / resolution.x;
  float aspect = resolution.x / resolution.y;

  vec2 q = vec2(gl_FragCoord.xy / resolution.xy);
    
  float anim = sin(time)/2.0+0.5;
  float strength = mix(20.0, 50.0, anim) * texelSize;
  
  //vignette blur
  float radius = length(q - 0.5);
  radius = smoothstep(0.0, 1.6, radius) * strength;
  
  //jitter the noise but not every frame
  float tick = floor(fract(time)*20.0);
  float jitter = mod(tick * 382.0231, 21.321);
  
  //apply blur
  vec2 uv = q * vec2(aspect, 1.0);
  vec3 text = blur(uv, radius, aspect, jitter);
  gl_FragColor.rgb = text;
  gl_FragColor.a = 1.0;
}
*/